const { saveReport } = require('./db-operations/request-templates')
const { createNoteKeyboards, mainKeyboards } = require('./modules/keyboards')

async function createDialog(conversation, ctx) {
    try {
        const validMood = ['üò£', 'üôÅ', 'üòê', 'üôÇ', 'üòÉ']
        let mood
        while (true) {
            await ctx.reply('–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?', {
                reply_markup: createNoteKeyboards.choiseMoodKeyboard(),
            })

            mood = await conversation.form.text()

            if (validMood.includes(mood)) {
                break
            }
            await ctx.reply(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.',
            )
        }

        async function createChoice(category, keyboard) {
            const selected = []

            while (true) {
                await ctx.reply(
                    `üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n\n–ù–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.\n\nüîπ –í—ã–±—Ä–∞–Ω–æ: ${selected.join(', ') || '–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}`,
                    {
                        reply_markup: keyboard,
                    },
                )

                const choice = await conversation.waitFor('message:text')

                if (choice.message.text === '–ì–æ—Ç–æ–≤–æ ‚û°Ô∏è') {
                    if (selected.length === 0) {
                        await ctx.reply(
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                        )
                        continue
                    }
                    return selected
                }
                if (choice.message.text === '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä üóëÔ∏è') {
                    if (selected.length === 0) {
                        await ctx.reply('‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç')
                        continue
                    } else {
                        const removed = selected.pop()
                        await ctx.reply(`üóëÔ∏è –ü—É–Ω–∫—Ç "${removed}" —É–¥–∞–ª—ë–Ω.`)
                        continue
                    }
                }
                if (selected.includes(choice.message.text)) {
                    await ctx.reply('–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω!')
                    continue
                }

                selected.push(choice.message.text)
            }
        }

        const restActivities = await createChoice(
            '–û—Ç–¥—ã—Ö –∏ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ',
            createNoteKeyboards.activitiesRestKeyboard(),
        )
        const workActivities = await createChoice(
            '–†–∞–±–æ—Ç–∞ –∏ —É—á–µ–±–∞',
            createNoteKeyboards.activitiesWorkKeyboard(),
        )
        const societyActivities = await createChoice(
            '–û–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ü–∏—É–º',
            createNoteKeyboards.activitiesSocietyKeyboard(),
        )

        const loveEmotion = await createChoice(
            '–≠–º–æ—Ü–∏–∏ –ª—é–±–≤–∏',
            createNoteKeyboards.emotionLoveKeyboard(),
        )
        const happyEmotion = await createChoice(
            '–≠–º–æ—Ü–∏–∏ —Ä–∞–¥–æ—Å—Ç–∏',
            createNoteKeyboards.emotionHappyKeyboard(),
        )
        const angerEmotion = await createChoice(
            '–≠–º–æ—Ü–∏–∏ –∑–ª–æ—Å—Ç–∏',
            createNoteKeyboards.emotionAngerKeyboard(),
        )

        await ctx.reply(
            '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–Ω—è - –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å!',
            {
                reply_markup: { remove_keyboard: true },
            },
        )
        const comment = await conversation.form.text()

        const saveMessage = await ctx.reply(
            '–ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?',
            {
                reply_markup: createNoteKeyboards.choiceSaveKeyboard(),
            },
        )

        const { callbackQuery } = await conversation.waitFor(
            'callback_query:data',
        )
        await ctx.api.editMessageReplyMarkup(
            ctx.chat.id,
            saveMessage.message_id,
            { reply_markup: null },
        )

        if (callbackQuery.data === 'confirm_save') {
            const data = {
                mood,
                restActivities,
                workActivities,
                societyActivities,
                loveEmotion,
                happyEmotion,
                angerEmotion,
                comment,
            }
            await saveReport(ctx, data)
            await ctx.api.editMessageText(
                ctx.chat.id,
                saveMessage.message_id,
                `üìò –ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∞–Ω–∞.

üìä –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: 
–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}

–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
-–û—Ç–¥—ã—Ö: ${restActivities.join(', ')}
-–†–∞–±–æ—Ç–∞: ${workActivities.join(', ')}
-–°–æ—Ü–∏—É–º: ${societyActivities.join(', ')}

–í–∞—à–∏ —ç–º–æ—Ü–∏–∏: 
-–õ—é–±–æ–≤—å: ${loveEmotion.join(', ')}
-–†–∞–¥–æ—Å—Ç—å: ${happyEmotion.join(', ')}
-–ó–ª–æ—Å—Ç—å: ${angerEmotion.join(', ')} 

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–Ω—è: ${comment}`,
                {
                    reply_markup: mainKeyboards.backMenuKeyboard(),
                },
            )
        } else if (callbackQuery.data === 'cancel_save') {
            await ctx.api.editMessageText(
                ctx.chat.id,
                saveMessage.message_id,
                '–ó–∞–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                {
                    reply_markup: mainKeyboards.backMenuKeyboard(),
                },
            )
        }
    } catch (err) {
        console.log(err)
    }
}

module.exports = { createDialog }
